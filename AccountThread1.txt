class Account{


	//data members
	private int ano;
	private String title;
	private double balance;

	//constructor
	public Account(int a,String t,double b){
		ano=a;
		title=t;
		balance=b;
	}

	public int getAno(){
		return ano;
	}

	
	public double getBalance(){
		return balance;
	}


	public String  getTitle(){
		return title;
	}


	public void setTitle(String t){
		title=t;
	}

	//Simulating thread switching
	public synchronized void deposit(double amt){
		double b;
           try{
				b=balance+amt;
				Thread.sleep(100);
				balance=b;
				System.out.println("Balance after deposit is "+ balance);
			}catch(InterruptedException iex){
				iex.printStackTrace();
			}
	}

	//Simulating thread switching
	public void withdraw(double amt){
		if ((balance-amt)>0){
			double b;
           try{
				b=balance-amt;
				Thread.sleep(100);
				balance=b;
				System.out.println("Balance after withdrawl is "+balance);
			}catch(InterruptedException iex){
				iex.printStackTrace();
			}
		}else{
			System.out.println("Insufficient funds");
		}
	}
}
class CustomerThread extends Thread{
     private Account accountInfo;
     public CustomerThread(Account a){
			accountInfo=a;
     }
     public void run(){
			accountInfo.deposit(10000);
     }
}
public class AccountThread{
    public static void main(String[] args){
		Account a=new Account(101,"NK",10000);

	try{

		CustomerThread[] c=new CustomerThread[5];

		//create customer objects as threads
		//by passing same account object to all for thread sync
		for(int i=0;i<5;i++){
			c[i]=new CustomerThread(a);
			c[i].start();
		}

		//Call join methods on child threads to make sure they all complete
		//before control passes to main
		for(int k=0;k<5;k++){
			c[k].join();
 		}

		System.out.println("Final Balance is "+a.getBalance());

	  }catch(Exception ex){
			System.out.println(ex.getMessage());
	  }	
     }
}